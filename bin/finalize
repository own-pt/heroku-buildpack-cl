#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}
function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}
echo $PWD
# parse and derive params
BUILDPACK_DIR=$(cd $(dirname $0); cd ..; pwd) # absolute path of buildpack
BUILD_DIR=$1
CACHE_DIR=$2

import_env() {
  local name=$1
  [ -f /$name ] && export "$name=$(< /$name)"
}

import_env SBCL_VERSION
import_env CL_WEBSERVER
import_env RESET_CACHE
import_env SSH_PRIVATE_KEY
import_env SBCL_BUILD_ARGS
import_env SBCL_RELEASE_ARGS

CL_DIR="$CACHE_DIR/sbcl"
echo "-----> compile params: $BUILD_DIR $CACHE_DIR"

if [ $RESET_CACHE ]; then
  echo "-----> flushing cache"
  rm -rf $CACHE_DIR/*
fi

echo "-----> CL_IMPL: SBCL - $SBCL_VERSION"

CL_PACKAGE="http://downloads.sourceforge.net/project/sbcl/sbcl/$SBCL_VERSION/sbcl-$SBCL_VERSION-x86-64-linux-binary.tar.bz2"
DECOMPRESS="tar jxvf - -C $CL_DIR"
echo  $CL_PACKAGE
echo "-----> CL_WEBSERVER: $CL_WEBSERVER"

case $CL_WEBSERVER in
  hunchentoot)
    ;;
  aserve)
    # setting up paths for building
    echo "-----> Getting patched versions of libraries"

    mkdir $CACHE_DIR/repos    # should be under an if to avoid error
    pushd $CACHE_DIR/repos

    if [ -d $CACHE_DIR/repos/portableaserve ]; then
         echo 'aserve already present'
         pushd portableaserve
         git pull origin master
         popd
    else
        git clone git://github.com/mtravers/portableaserve.git
    fi

    if [ -d $CACHE_DIR/repos/wuwei ]; then
         echo 'wuwei already present'
         pushd wuwei
         git pull origin master
         popd
    else
        git clone git://github.com/mtravers/wuwei.git
    fi

    popd
    ;;
  *)
    echo "-----> ! Please set CL_WEBSERVER: heroku config:add CL_WEBSERVER={hunchentoot|aserve}."
    exit 1
esac

echo "-----> Installing sbcl"
if [ ! -d $CL_DIR ]; then
    echo "-----> Fetching sbcl"
    mkdir -p $CL_DIR  && curl $CL_PACKAGE -s -o -  | $DECOMPRESS
fi

# add to slug
cp -r $CL_DIR $BUILD_DIR

echo "sbcl installed" | indent

echo "-----> Installing quicklisp"
if [ ! -d $BUILDPACK_DIR/lib/ ] ; then
    echo "-----> Fetching quicklisp"
    mkdir $BUILDPACK_DIR/lib  && curl https://beta.quicklisp.org/quicklisp.lisp -o $BUILDPACK_DIR/lib/quicklisp.lisp
fi

export BUILDPACK_DIR
export CACHE_DIR
export BUILD_DIR

sh $CL_DIR/sbcl-$SBCL_VERSION-x86-64-linux/run-sbcl.sh --load "$BUILDPACK_DIR/setup/install-quicklisp.lisp"

echo "quicklisp installed" | indent

if [ -a $BUILD_DIR/dependecies ] ; then
    if [ ! -z "$SSH_PRIVATE_KEY" ]
    then
	mkdir -p ~/.ssh/
	echo "using SSH_PRIVATE_KEY" | indent
	echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa & chmod 700 ~/.ssh & chmod 600 ~/.ssh/id_rsa
	touch ~/.ssh/known_hosts
	ssh-keyscan github.ibm.com >> ~/.ssh/known_hosts
    fi

    echo "-----> Cloning dependecies"
    pushd $CACHE_DIR/quicklisp/local-projects/

    while IFS= read -r line
    do
	echo "cloning $line"
	git clone $line
    done < "$BUILD_DIR/dependecies"
    ls -d */ | xargs -I{} git -C {} pull
    popd
    echo "dependecies cloned" | indent
fi

echo "-----> Starting build"
ls
sh $CL_DIR/sbcl-$SBCL_VERSION-x86-64-linux/run-sbcl.sh $SBCL_BUILD_ARGS --load "$BUILDPACK_DIR/setup/compile.lisp"

echo "-----> Build finished"
chmod a+x $BUILD_DIR/lispapp
